package main

import(
  . "github.com/frozenkp/gopwn"
  "log"
  "strings"
  "strconv"
  "bytes"
)

const MAXPLAYER int = 1

func main(){
  LOG = false
  ch := make(chan error)

  fail := 0
  for i:=0; i<MAXPLAYER; i++ {
    go player(ch)
  }

  for i:=0; i<MAXPLAYER; i++ {
    if err := <-ch; err != nil {
      log.Println(err)
      fail++
    }
  }

  log.Println("Failed rate:", float64(fail)/float64(MAXPLAYER))
}

func player(ch chan error){
  // brute-force flag
  var flag []byte = bytes.Repeat([]byte{0x0}, 100)
  var pre_time []int = make([]int, 100)
  max_time := 0
  var max_byte byte
  for i:=0; i<100; i++ {
    for k:=0; k<1; k++ {
      for j:=33; j<=126; j++ {
        flag[i] = byte(j)
        resp, err := solve(string(flag))
        if err != nil {
          ch <- err
          return
        }

        if !strings.Contains(resp, "Haha,") {
          ch <- nil
          return
        }

        log.Println(string(flag), string([]byte{max_byte}))
        log.Println(resp)

        new_time, _ := strconv.Atoi(strings.Split(resp, " ")[5])
        if new_time > max_time {
          max_time = new_time
          max_byte = byte(j)
        }
      }
    }

    if i > 1 {
      if max_time - pre_time[i-1] < (pre_time[i-1] - pre_time[i-2])/2 {
        max_time = pre_time[i-2]
        i -= 2
        continue
      }
    }
    flag[i] = max_byte
    pre_time[i] = max_time

    log.Println(string(flag))
  }

  ch <- nil
}

func solve(flag string) (string, error) {
  conn, err := Remote("60.250.197.227:11001")
  //conn, err := Process("./Saburo_modified")
  if err != nil {
    return "", err
  }

  conn.Sendline(flag)
  resp, err := conn.Recvuntil('\n')
  if err != nil {
    return "", err
  }

  err = conn.Close()
  return resp, err
}
